from django.db import models
from django.core.validators import MinValueValidator


class PaymentMethod(models.Model):
    """
    Representa um m√©todo de pagamento dispon√≠vel na loja.
    Suporta diferentes tipos (cash, cr√©dito, d√©bito, pix, etc.)
    e regras de parcelamento, taxas e juros.
    """

    # Tipos de m√©todo de pagamento
    TYPE_CHOICES = [
        ("cash", "Dinheiro"),
        ("pix", "PIX"),
        ("debit", "Cart√£o de D√©bito"),
        ("credit", "Cart√£o de Cr√©dito"),
        ("boleto", "Boleto"),
        ("other", "Outro"),
    ]

    name = models.CharField(
        max_length=100,
        unique=True,
        verbose_name="Nome do M√©todo de Pagamento"
    )

    type = models.CharField(
        max_length=20,
        choices=TYPE_CHOICES,
        default="cash",
        verbose_name="Tipo de Pagamento"
    )

    # üí∏ Taxa interna (para c√°lculo de lucro l√≠quido)
    internal_fee = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=0,
        validators=[MinValueValidator(0)],
        verbose_name="Taxa Interna (%)",
        help_text="Taxa cobrada pela operadora (afeta o lucro da loja)."
    )

    # ‚öôÔ∏è Campos de parcelamento (v√°lidos apenas para cr√©dito/boleto)
    min_installment_amount = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        default=0,
        validators=[MinValueValidator(0)],
        verbose_name="Valor M√≠nimo para Parcelar (R$)",
        blank=True,
        null=True
    )

    max_installments = models.PositiveIntegerField(
        default=1,
        verbose_name="M√°ximo de Parcelas",
        blank=True,
        null=True
    )

    no_interest_installments = models.PositiveIntegerField(
        default=1,
        verbose_name="Parcelas Sem Juros",
        blank=True,
        null=True
    )

    customer_interest_rate = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        default=0,
        validators=[MinValueValidator(0)],
        verbose_name="Juros ao Cliente (%) ao m√™s",
        blank=True,
        null=True
    )

    is_active = models.BooleanField(default=True, verbose_name="Ativo")

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # -----------------------
    # M√âTODOS DE NEG√ìCIO
    # -----------------------

    def clean(self):
        """
        Garante que apenas m√©todos compat√≠veis tenham parcelamento.
        """
        from django.core.exceptions import ValidationError

        # Se o tipo for dinheiro, PIX ou d√©bito ‚Äî bloqueia parcelas
        if self.type in ["cash", "pix", "debit"]:
            if (
                self.max_installments and self.max_installments > 1
            ) or (
                self.customer_interest_rate
                and self.customer_interest_rate > 0
            ):
                raise ValidationError(
                    f"O m√©todo '{self.get_type_display()}' "
                    f"n√£o permite parcelamento ou juros."
                )

            # Zera os campos de parcelamento
            self.max_installments = 1
            self.no_interest_installments = 1
            self.customer_interest_rate = 0
            self.min_installment_amount = 0

    def calculate_total_with_interest(
        self,
        amount: float,
        installments: int,
    ) -> float:
        """
        Retorna o valor total considerando juros e n√∫mero de parcelas.
        S√≥ faz sentido para 'credit' ou 'boleto'.
        """
        if self.type not in ["credit", "boleto"]:
            return float(amount)

        if (
            not self.customer_interest_rate
            or installments <= (self.no_interest_installments or 1)
        ):
            return float(amount)

        monthly_interest = float(self.customer_interest_rate) / 100
        total = amount * (
            (1 + monthly_interest)
            ** (installments - (self.no_interest_installments or 1))
        )
        return round(total, 2)

    def __str__(self):
        return f"{self.name} ({self.get_type_display()})"

    class Meta:
        verbose_name = "M√©todo de Pagamento"
        verbose_name_plural = "M√©todos de Pagamento"
        ordering = ["name"]
